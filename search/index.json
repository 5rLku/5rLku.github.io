[{"content":"","date":"2023-02-15T11:24:41+08:00","permalink":"https://5rLku.github.io/article/games101_lecture02/","title":"GAMES101_Lecture02"},{"content":"什么是图形学  用计算机来合成和操作视觉信息  为什么学习图形学  全局光照的效果是一款游戏画面好坏的不错的技术判断标准 “The Quick Brown Fox Jumps Over The Lazy Dog” \u0026ndash; 字体测试常用，包含所有英文字母 技术挑战 1：Math of projections, curves, surfaces 技术挑战 2：Physics of lighting and shading 技术挑战 3：Representing / operating shapes in 3D 技术挑战 4：Animation / simulation 这门课不涉及3D图形软硬件编程（OpenGL，DX等） Computer Graphics is AWESOME！  课程内容  Rasterization 光栅化  投影几何图元（geometry primitives）到屏幕上 把图元拆分为片元（fragments） 电子游戏的金标准（Real-time 应用）   Curves and meshes 曲线和网格（几何）  如何在计算机图形学中表示几何形体   Ray tracing 光线追踪  从摄像机射出射线穿过每个像素  计算 intersection 和 shading continue to bounce 光线直到碰到光源   电影/动画的金标准（Offline 应用） Trade off：效果和时间 实时光线追踪   Animation / Simulation 动画和模拟  Key frame animation Mass-spring system   GAMES101 不包括：  Using OpenGL, DirectX, Vulkan  The syntax of Shaders Learn Graphics, not Graphics API 学完课程有能力去自学   3D Modeling（Maya, 3DS Max, Blender）和 VR/游戏开发（Unity，Unreal Engine） 计算机视觉和深度学习    课程细节  主页上 Reading 材料课前阅读 使用 IDE 不发布作业代码和答案（Codes and Solutions），只进行讨论和解释（Discussion and Explanation）  ","date":"2022-09-05T21:41:48+08:00","permalink":"https://5rLku.github.io/article/games101_lecture01/","title":"GAMES101_Lecture01"},{"content":"问题描述 给定两个数 a 和 b，计算他们的和\n基本思路 读取 a 和 b，计算他们的和 $result$ $$result = a + b$$\n通过代码 #include \u0026lt;iostream\u0026gt;#include \u0026lt;cstdio\u0026gt;using namespace std; int main() { int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; endl; return 0; } ","date":"2021-05-24T15:49:57+08:00","permalink":"https://5rLku.github.io/article/aplusb-problem/","title":"A+B Problem"}]